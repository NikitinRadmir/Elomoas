@{
    ViewData["Title"] = "Messanger";
}

<style>
    #friendsModal {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
        z-index: 99999 !important;
        background: rgba(0, 0, 0, 0.5) !important;
        display: none;
    }

    .friends-modal-content {
        position: absolute !important;
        top: 50% !important;
        left: 50% !important;
        transform: translate(-50%, -50%) !important;
        background: white !important;
        padding: 20px !important;
        border-radius: 8px !important;
        width: 90% !important;
        max-width: 500px !important;
        z-index: 100000 !important;
        max-height: 80vh !important;
        overflow-y: auto !important;
    }

    .friends-modal-header {
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        margin-bottom: 20px !important;
        position: sticky !important;
        top: 0 !important;
        background: white !important;
        padding-bottom: 10px !important;
        border-bottom: 1px solid #eee !important;
    }

    .friends-modal-close {
        cursor: pointer !important;
        font-size: 24px !important;
        color: #666 !important;
    }

    .friend-item {
        cursor: pointer !important;
        transition: background-color 0.2s ease !important;
    }

    .friend-item:hover {
        background-color: #f8f9fa !important;
    }

    .friend-search {
        position: sticky !important;
        top: 60px !important;
        background: white !important;
        padding: 10px 0 !important;
        z-index: 1 !important;
    }

    .no-results {
        text-align: center !important;
        padding: 20px !important;
        color: #666 !important;
    }

    .friends-list {
        margin-top: 10px !important;
    }

    .friend-search-wrapper {
        position: relative !important;
    }

    .friend-search-icon {
        position: absolute !important;
        left: 10px !important;
        top: 50% !important;
        transform: translateY(-50%) !important;
        color: #666 !important;
    }

    .friend-search input {
        padding-left: 35px !important;
        border-radius: 20px !important;
    }

    .friend-search input:focus {
        box-shadow: none !important;
        border-color: #007bff !important;
    }

    .message-item {
        margin-bottom: 20px;
        display: flex;
        flex-direction: column;
    }

    .message-content {
        max-width: 85%;
        min-width: 120px;
        padding: 10px 15px;
        border-radius: 15px;
        position: relative;
        overflow-wrap: break-word;
        word-wrap: break-word;
        hyphens: auto;
        display: inline-block;
    }

    .message-content p {
        margin: 0;
        white-space: pre-wrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }

    .message-time {
        font-size: 0.75rem;
        color: #888;
        margin-top: 5px;
    }

    .incoming-message {
        align-items: flex-start;
    }

    .incoming-message .message-content {
        background-color: #f1f1f1;
        color: #333;
    }

    .outgoing-message {
        align-items: flex-end;
    }

    .outgoing-message .message-content {
        background-color: #007bff;
        color: white;
    }

    .outgoing-message .message-time {
        color: #ccc;
    }

    #messagesContainer {
        height: calc(100vh - 300px);
        overflow-y: auto;
        overflow-x: hidden;
        padding: 20px;
        width: 100%;
        max-width: 100%;
    }

    .chat-wrapper {
        height: calc(100vh - 100px);
        position: relative;
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
    }

    .chat-body {
        height: calc(100vh - 250px);
        overflow-y: auto;
    }

    #messagesContainer {
        padding-bottom: 80px;
    }

    .chat-bottom {
        left: 0;
        right: 0;
        background: white;
        border-top: 1px solid #eee;
        margin: 0 1%;
        border-radius: 0 0 15px 15px;
    }

    .chat-form {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .chat-form .form-group {
        margin: 0;
    }

    .chat-form input {
        width: 100%;
        border: 1px solid #eee;
        padding: 10px 15px;
        border-radius: 20px;
        background: white;
    }

    .chat-form input:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .chat-form button {
        min-width: 40px;
        height: 40px;
        border: none;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        padding: 0;
        margin: 0;
    }

    .chat-form button.bg-grey {
        background-color: #f1f1f1;
    }

    .chat-form button.bg-current {
        background-color: #007bff;
    }

    .message-input-wrapper {
        background: white;
        position: sticky;
        bottom: 0;
        z-index: 100;
    }

    .message-input-wrapper .form-control {
        border-radius: 20px 0 0 20px;
        border: 1px solid #dee2e6;
    }

    .message-input-wrapper .btn {
        border-radius: 0 20px 20px 0;
        padding: 0.375rem 1rem;
    }

    .chat-item {
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .chat-item:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }

    .chat-item.active {
        background-color: rgba(0, 123, 255, 0.1);
    }

    .chat-meta {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
    }

    .badge-pill {
        margin-top: 5px;
    }

    .chat-item {
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .chat-item:hover {
        background-color: #f8f9fa;
    }
    .chat-item.active {
        background-color: #e9ecef;
    }
    .chat-info p {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    .chat-meta {
        min-width: 70px;
    }
    .badge-primary {
        background-color: #007bff;
    }
    
    .message-date-divider {
        display: flex;
        align-items: center;
        text-align: center;
        margin: 20px 0;
        position: relative;
    }

    .message-date-divider::before,
    .message-date-divider::after {
        content: '';
        flex: 1;
        border-bottom: 1px solid #e0e0e0;
    }

    .message-date-text {
        padding: 0 10px;
        color: #666;
        font-size: 0.9rem;
        background: white;
        margin: 0 10px;
        border-radius: 15px;
        padding: 5px 15px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
</style>

<div class="middle-sidebar-bottom">
    <div class="middle-sidebar-left bg-white dark-bg-transparent mr-3 pr-0">
        <div class="row">
            <div class="col-lg-6 col-xl-4 col-md-6 chat-left scroll-bar border-right-light pl-4 pr-4">
                <div class="d-flex justify-content-between align-items-center mt-0 pl-3 pt-3">
                    <div class="search-form flex-grow-1 mr-2">
                        <i class="ti-search font-xs"></i>
                        <input type="text" class="form-control text-grey-500 mb-0 bg-greylight border-0" placeholder="Search here.">
                    </div>
                    <button class="btn btn-primary rounded-circle" onclick="showFriendsModal()">
                        <i class="ti-plus"></i>
                    </button>
                </div>
                <div class="section full mt-2 mb-2 pl-3">
                    <ul class="list-group list-group-flush">
                    </ul>
                </div>
            </div>
            <div class="col-lg-6 col-xl-8 col-md-6 pl-0 d-none d-lg-block d-md-block">
                <div class="chat-wrapper pt-0 w-100 position-relative scroll-bar">
                    <div class="chat-header d-flex align-items-center border-bottom p-3">
                        <figure class="avatar mr-3 mb-0">
                            <img src="~/images/default-icon.jpg" alt="image" class="w45 rounded-circle">
                        </figure>
                        <div class="chat-header-info flex-grow-1">
                            <h6 class="mb-0 text-grey-900 fw-600">Выберите собеседника</h6>
                            <span class="text-grey-500">Нажмите на кнопку + чтобы начать чат</span>
                        </div>
                    </div>
                    <div class="chat-body p-3">
                        <div class="messages-content pb-5" id="messagesContainer">
                            <!-- Сообщения будут добавляться динамически -->
                        </div>
                    </div>
                    <div class="message-input-wrapper p-3 border-top">
                        <form id="messageForm" onsubmit="sendMessage(event)">
                            <div class="input-group">
                                <input type="text" 
                                       id="messageInput" 
                                       class="form-control" 
                                       placeholder="Введите сообщение..."
                                       autocomplete="off">
                                <div class="input-group-append">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="ti-arrow-right"></i>
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно со списком друзей -->
<div id="friendsModal">
    <div class="friends-modal-content">
        <div class="friends-modal-header">
            <h5>Выберите друга для чата</h5>
            <span class="friends-modal-close" onclick="hideFriendsModal()">&times;</span>
        </div>
        <div class="friend-search">
            <div class="friend-search-wrapper">
                <i class="ti-search friend-search-icon"></i>
                <input type="text" 
                       class="form-control" 
                       placeholder="Поиск по имени или email..." 
                       id="friendSearchInput"
                       autocomplete="off">
            </div>
        </div>
        <div class="friends-list">
            <!-- Список друзей будет загружен динамически -->
        </div>
        <div class="no-results" style="display: none;">
            <p>Друзья не найдены</p>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let allFriends = []; // Храним полный список друзей
        let currentChatId = null;
        let currentFriendId = null;
        let currentUserId = null;
        let connection = null;

        $(document).ready(function() {
            // Инициализация SignalR
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            connection.on("ReceiveMessage", function (message) {
                if (message.chatId === currentChatId) {
                    displayMessage(message, false);
                }
                updateChatsList();
            });

            connection.on("MessageSent", function (message) {
                if (message.chatId === currentChatId) {
                    displayMessage(message, true);
                }
                updateChatsList();
            });

            connection.start()
                .then(function () {
                    console.log("SignalR Connected.");
                    updateChatsList(); // Загружаем список чатов при подключении
                })
                .catch(function (err) {
                    console.error(err.toString());
                });

            // Закрытие модального окна при клике вне его содержимого
            $('#friendsModal').click(function(e) {
                if (e.target.id === 'friendsModal') {
                    hideFriendsModal();
                }
            });

            // Улучшенный поиск по друзьям
            let searchTimeout;
            $('#friendSearchInput').on('input', function() {
                clearTimeout(searchTimeout);
                const searchText = $(this).val().toLowerCase();
                
                searchTimeout = setTimeout(() => {
                    filterFriends(searchText);
                }, 300);
            });
        });

        function sendMessage(event) {
            event.preventDefault();
            
            const messageInput = $('#messageInput');
            const content = messageInput.val().trim();
            
            if (!content || !currentFriendId) return;
            
            connection.invoke("SendMessage", currentFriendId, content)
                .catch(function (err) {
                    console.error(err.toString());
                });
            
            messageInput.val('');
        }

        function formatDate(date) {
            const now = new Date();
            const messageDate = new Date(date);
            
            // Get days difference
            const diffTime = now - messageDate;
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
            
            // Check if date is in current week
            const startOfWeek = new Date(now);
            startOfWeek.setDate(now.getDate() - now.getDay()); // Start of current week (Sunday)
            
            if (messageDate.toDateString() === now.toDateString()) {
                return 'Today';
            }
            
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);
            if (messageDate.toDateString() === yesterday.toDateString()) {
                return 'Yesterday';
            }
            
            // If message is within current week
            if (messageDate >= startOfWeek) {
                return `${messageDate.toLocaleDateString('en-US', {
                    weekday: 'long' // Day name
                })}, ${messageDate.toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric'
                })}`;
            }
            
            // If message is in current year
            if (messageDate.getFullYear() === now.getFullYear()) {
                return messageDate.toLocaleDateString('en-US', {
                    month: 'long',
                    day: 'numeric'
                });
            }
            
            // For older messages
            return messageDate.toLocaleDateString('en-US', {
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            });
        }

        function displayMessage(message, isSent) {
            const messageDate = new Date(message.createdDate || new Date());
            const messageTime = messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            const dateDivId = `date-${messageDate.toDateString()}`;

            // Проверяем, нужно ли добавить разделитель даты
            if (!document.getElementById(dateDivId)) {
                const dateHtml = `
                    <div id="${dateDivId}" class="message-date-divider">
                        <span class="message-date-text">${formatDate(messageDate)}</span>
                    </div>
                `;
                $('#messagesContainer').append(dateHtml);
            }

            const messageHtml = `
                <div class="message-item ${isSent ? 'outgoing-message' : 'incoming-message'}">
                    <div class="message-content">
                        <p>${message.content}</p>
                        <small class="message-time">${messageTime}</small>
                    </div>
                </div>
            `;
            
            $('#messagesContainer').append(messageHtml);
            scrollToBottom();
        }

        function scrollToBottom() {
            const container = $('#messagesContainer');
            container.scrollTop(container[0].scrollHeight);
        }

        function filterFriends(searchText) {
            const filteredFriends = allFriends.filter(friend => 
                friend.name.toLowerCase().includes(searchText) || 
                friend.email.toLowerCase().includes(searchText)
            );
            
            displayFriends(filteredFriends);
        }

        function displayFriends(friends) {
            const friendsList = $('.friends-list');
            const noResults = $('.no-results');
            friendsList.empty();
            
            if (friends.length === 0) {
                noResults.show();
                return;
            }
            
            noResults.hide();
            friends.forEach(friend => {
                const friendHtml = `
                    <div class="friend-item d-flex align-items-center justify-content-between p-2 border-bottom">
                        <div class="d-flex align-items-center">
                            <img src="${friend.img || '/images/user-12.png'}" 
                                 alt="${friend.name}" 
                                 class="rounded-circle mr-2" 
                                 style="width: 40px; height: 40px; object-fit: cover;">
                            <div>
                                <h6 class="mb-0 friend-name">${friend.name}</h6>
                                <small class="text-muted">${friend.email}</small>
                            </div>
                        </div>
                        <button class="btn btn-primary btn-sm" onclick="startChat('${friend.identityId}', '${friend.name}', '${friend.img}', '${friend.email}')">
                            Message
                        </button>
                    </div>
                `;
                friendsList.append(friendHtml);
            });
        }

        function showFriendsModal() {
            $('#friendsModal').fadeIn(300);
            $('#friendSearchInput').val(''); // Очищаем поле поиска
            loadFriends();
        }

        function hideFriendsModal() {
            $('#friendsModal').fadeOut(300);
            $('.no-results').hide();
        }

        function loadFriends() {
            $.get('/Messanger/GetFriends', function(friends) {
                allFriends = friends; // Сохраняем полный список
                displayFriends(friends);
            });
        }

        function startChat(friendId, friendName, friendImg, friendEmail) {
            currentFriendId = friendId;
            
            // Показываем чат
            $('.col-lg-6.col-xl-8').removeClass('d-none');
            
            // Обновляем шапку чата
            $('.chat-header img').attr('src', friendImg || '/images/default-icon.jpg');
            $('.chat-header h6').text(friendName);
            $('.chat-header span').text(friendEmail);
            
            // Скрываем модальное окно
            hideFriendsModal();
            
            // Очищаем сообщения
            $('#messagesContainer').empty();
            
            // Загружаем историю сообщений
            $.get(`/Messanger/GetChatMessages?friendId=${friendId}`)
                .done(function(data) {
                    currentChatId = data.chatId;
                    currentUserId = data.currentUserId;
                    
                    if (data.messages && Array.isArray(data.messages)) {
                        // Сортируем сообщения по дате
                        const sortedMessages = data.messages.sort((a, b) => 
                            new Date(a.createdDate) - new Date(b.createdDate)
                        );
                        
                        sortedMessages.forEach(message => {
                            displayMessage(message, message.senderId === currentUserId);
                        });
                        scrollToBottom();
                    }
                    
                    // Присоединяемся к чату через SignalR
                    connection.invoke("JoinChat", currentChatId.toString())
                        .catch(function (err) {
                            console.error(err.toString());
                        });
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.error('Error loading messages:', errorThrown);
                });
        }

        function updateChatsList() {
            $.get('/Messanger/GetUserChats')
                .done(function(chats) {
                    const chatList = $('.list-group');
                    chatList.empty();

                    if (chats && Array.isArray(chats)) {
                        chats.forEach(chat => {
                            const lastMessageTime = chat.lastMessageTime 
                                ? new Date(chat.lastMessageTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) 
                                : '';
                            
                            const chatHtml = `
                                <li class="list-group-item chat-item ${chat.chatId === currentChatId ? 'active' : ''}" 
                                    onclick="startChat('${chat.userId}', '${chat.userName}', '${chat.userImage}', '${chat.userEmail}')">
                                    <div class="d-flex align-items-center">
                                        <div class="avatar mr-3">
                                            <img src="${chat.userImage}" 
                                                 alt="${chat.userName}" 
                                                 class="rounded-circle"
                                                 style="width: 45px; height: 45px; object-fit: cover;">
                                        </div>
                                        <div class="chat-info flex-grow-1">
                                            <h6 class="mb-1">${chat.userName}</h6>
                                            <p class="mb-0 text-muted small text-truncate" style="max-width: 200px;">
                                                ${chat.lastMessage || 'Нет сообщений'}
                                            </p>
                                        </div>
                                        <div class="chat-meta text-right">
                                            <small class="text-muted d-block mb-1">${lastMessageTime}</small>
                                            ${chat.unreadCount > 0 ? 
                                                `<div class="badge badge-primary badge-pill">${chat.unreadCount}</div>` 
                                                : ''}
                                        </div>
                                    </div>
                                </li>
                            `;
                            chatList.append(chatHtml);
                        });
                    }
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.error('Error updating chats list:', errorThrown);
                });
        }

        function openChat(chatId, friendId, friendName, friendImg, friendEmail) {
            if (currentChatId) {
                // Покидаем текущий чат
                connection.invoke("LeaveChat", currentChatId.toString())
                    .catch(function (err) {
                        console.error(err.toString());
                    });
            }
            
            currentChatId = chatId;
            currentFriendId = friendId;
            
            // Показываем чат
            $('.col-lg-6.col-xl-8').removeClass('d-none');
            
            // Обновляем шапку чата
            $('.chat-header img').attr('src', friendImg || '/images/default-icon.jpg');
            $('.chat-header h6').text(friendName);
            $('.chat-header span').text(friendEmail);
            
            // Загружаем сообщения
            loadChatMessages(friendId);
            
            // Обновляем активный чат в списке
            $('.chat-item').removeClass('active');
            $(`.chat-item[onclick*="${chatId}"]`).addClass('active');
            
            // Присоединяемся к новому чату
            connection.invoke("JoinChat", chatId.toString())
                .catch(function (err) {
                    console.error(err.toString());
                });
        }

        function loadChatMessages(friendId) {
            $('#messagesContainer').empty();
            
            $.get(`/Messanger/GetChatMessages?friendId=${friendId}`)
                .done(function(data) {
                    currentChatId = data.chatId;
                    currentUserId = data.currentUserId;
                    
                    if (data.messages && Array.isArray(data.messages)) {
                        data.messages.forEach(message => {
                            displayMessage(message, message.senderId === currentUserId);
                        });
                        scrollToBottom();
                    }
                    
                    // Помечаем сообщения как прочитанные
                    connection.invoke("MarkAsRead", currentChatId.toString())
                        .catch(function (err) {
                            console.error(err.toString());
                        });
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.error('Error loading messages:', errorThrown);
                });
        }
    </script>
}  