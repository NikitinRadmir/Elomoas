@model Elomoas.mvc.Models.Courses.CourseDetailsVM

@{
    ViewData["Title"] = Model.Course.Name;
}

<div class="middle-sidebar-bottom">
    <div class="middle-sidebar-left">
        <div class="row">
            <div class="col-xl-8 col-xxl-9">
                <div class="card border-0 mb-0 rounded-lg overflow-hidden">
                    <div class="player shadow-none">
                        <video id='video' src='@Model.Course.Video' playsinline></video>
                        <div class='play-btn-big'></div>
                        <div class='controls'>
                            <div class="time"><span class="time-current"></span><span class="time-total"></span></div>
                            <div class='progress'>
                                <div class='progress-filled'></div>
                            </div>
                            <div class='controls-main'>
                                <div class='controls-left'>
                                    <div class='volume'>
                                        <div class='volume-btn loud mt-1'>
                                            <i class="feather-volume-1 font-xl text-white"></i>
                                        </div>
                                        <div class='volume-slider'>
                                            <div class='volume-filled'></div>
                                        </div>
                                    </div>
                                </div>
                                <div class='play-btn paused'></div>
                                <div class="controls-right">
                                    <div class='speed'>
                                        <ul class='speed-list'>
                                            <li class='speed-item' data-speed='0.5'>0.5x</li>
                                            <li class='speed-item' data-speed='0.75'>0.75x</li>
                                            <li class='speed-item active' data-speed='1'>1x</li>
                                            <li class='speed-item' data-speed='1.5'>1.5x</li>
                                            <li class='speed-item' data-speed='2'>2x</li>
                                        </ul>
                                    </div>
                                    <div class='fullscreen'>
                                        <svg width="30" height="22" viewBox="0 0 30 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M0 0V-1.5H-1.5V0H0ZM0 18H-1.5V19.5H0V18ZM26 18V19.5H27.5V18H26ZM26 0H27.5V-1.5H26V0ZM1.5 6.54545V0H-1.5V6.54545H1.5ZM0 1.5H10.1111V-1.5H0V1.5ZM-1.5 11.4545V18H1.5V11.4545H-1.5ZM0 19.5H10.1111V16.5H0V19.5ZM24.5 11.4545V18H27.5V11.4545H24.5ZM26 16.5H15.8889V19.5H26V16.5ZM27.5 6.54545V0H24.5V6.54545H27.5ZM26 -1.5H15.8889V1.5H26V-1.5Z" transform="translate(2 2)" fill="white" />
                                        </svg>
                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>
                </div>
                <div class="card d-block border-0 rounded-lg overflow-hidden dark-bg-transparent bg-transparent mt-4 pb-3">
                    <div class="row">
                        <div class="col-12">
                            <h2 class="fw-700 font-md d-block lh-4 mb-2">@Model.Course.Name</h2>
                        </div>
                    </div>
                </div>

                
                <div class="card d-block border-0 rounded-lg overflow-hidden p-4 shadow-xss mt-4 alert-success">
                    <h2 class="fw-700 font-sm mb-3 mt-1 pl-1 text-success mb-4">What you'll learn from this lesson</h2>
                    @foreach (var item in Model.Course.Learn.Split('^'))
                    {
                        <h4 class="font-xssss fw-600 text-grey-600 mb-3 pl-30 position-relative lh-24">
                            <i class="ti-check font-xssss btn-round-xs bg-success text-white position-absolute left-0 top-5"></i>
                            @item
                        </h4>
                    }
                </div>

                <div class="card d-block border-0 rounded-lg overflow-hidden p-4 shadow-xss mt-4">
                    <h2 class="fw-700 font-sm mb-3 mt-1 pl-1 mb-3">Description</h2>
                    <p class="font-xssss fw-500 lh-28 text-grey-600 mb-0 pl-2">@Model.Course.Description</p>
                </div>
            </div>
            <div class="col-xl-4 col-xxl-3">
                <div class="card p-4 mb-4 bg-primary border-0 shadow-xss rounded-lg">
                    <div class="card-body">
                        <h2 class="text-white font-xsssss fw-700 text-uppercase ls-3 ">@Model.Course.PL</h2>
                        <h1 class="display2-size text-white fw-700">$ @Model.Course.Price / month</h1>
                        <input type="hidden" id="basePrice" value="@Model.Course.Price" />
                        <h4 class="text-white fw-500 mb-4 lh-24 font-xssss">For anyone validating Framer as a professional prototyping tool.</h4>
                        <h4 class="text-white font-xssss mb-2"><i class="ti-check mr-2 text-white"></i> Unlimited views</h4>
                        <h4 class="text-white font-xssss mb-2"><i class="ti-check mr-2 text-white"></i> Everything in Free</h4>
                        <h4 class="text-white font-xssss mb-4"><i class="ti-check mr-2 text-white"></i> Private share links</h4>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="subscription-container">
                                @if (Model.IsSubscribed)
                                {
                                    <div class="bg-white p-3 rounded-lg mb-3">
                                        <h4 class="text-success fw-600 font-xssss mb-2">Active Subscription</h4>
                                        <div class="subscription-info">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span class="font-xssss fw-600 text-grey-600">Duration:</span>
                                                <span class="font-xssss fw-700 text-primary">@Model.SubscriptionInfo.DurationInMonths months</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span class="font-xssss fw-600 text-grey-600">Price:</span>
                                                <span class="font-xssss fw-700 text-primary">$@Model.SubscriptionInfo.SubscriptionPrice</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="font-xssss fw-600 text-grey-600">Valid until:</span>
                                                <span class="font-xssss fw-700 text-primary">@Model.SubscriptionInfo.ExpirationDate.ToString("dd.MM.yyyy")</span>
                                            </div>
                                        </div>
                                    </div>
                                    <a href="#" class="btn btn-block border-0 w-100 bg-white p-3 text-danger fw-600 rounded-lg d-inline-block font-xssss unsubscribe-btn" data-course-id="@Model.Course.Id">UNSUBSCRIBE</a>
                                }
                                else
                                {
                                    <div class="subscription-options bg-white p-3 rounded-lg">
                                        <h4 class="text-primary fw-600 font-xssss mb-3">Choose duration:</h4>
                                        <div class="duration-options">
                                            @foreach (var option in Model.DurationOptions)
                                            {
                                                <div class="duration-option mb-2" data-months="@option.Months" data-base-price="@Model.Course.Price">
                                                    <div class="d-flex justify-content-between align-items-center p-2 rounded cursor-pointer duration-select @(option.Months == 1 ? "selected" : "")">
                                                        <div>
                                                            <span class="font-xssss fw-600">@option.GetDisplayText()</span>
                                                            @if (option.DiscountPercent > 0)
                                                            {
                                                                <span class="badge bg-success text-white ml-2">-@option.DiscountPercent%</span>
                                                            }
                                                        </div>
                                                        <div class="text-primary font-xssss fw-700 subscription-price">
                                                            $@option.CalculatePrice(Model.Course.Price)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <button class="btn btn-block border-0 w-100 bg-primary p-3 text-white fw-600 rounded-lg d-inline-block font-xssss mt-3" id="subscribeButton" data-course-id="@Model.Course.Id" data-duration="1">
                                            SUBSCRIBE
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <a asp-controller="Auth" asp-action="Login" class="btn btn-block border-0 w-100 bg-white p-3 text-primary fw-600 rounded-lg d-inline-block font-xssss">LOGIN</a>
                        }
                    </div>
                </div>
                

                
            </div>

        </div>
    </div>
    
</div>

@section Styles {
    <link href="https://vjs.zencdn.net/8.10.0/video-js.css" rel="stylesheet" />
    <style>
        .duration-select {
            border: 1px solid #e5e5e5;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .duration-select:hover {
            background-color: #f8f9fa;
            border-color: #007bff;
        }

        .duration-select.selected {
            background-color: #e8f4ff;
            border-color: #007bff;
        }

        .badge {
            font-size: 0.7rem;
            padding: 0.2rem 0.5rem;
        }

        .cursor-pointer {
            cursor: pointer;
        }

        .spinner-border {
            width: 1rem;
            height: 1rem;
            border-width: 0.15em;
        }

        .subscription-price {
            font-size: 1.2rem;
            font-weight: 600;
            color: #007bff;
        }
    </style>
}

@section Scripts {
    <script src="https://vjs.zencdn.net/8.10.0/video.min.js"></script>
    <script>
        $(document).ready(function() {
            let selectedDuration = 1;
            let isProcessing = false;

            function updateSubscriptionUI(isSubscribed, subscriptionInfo) {
                const subscriptionContainer = $('.subscription-container');
                
                if (isSubscribed) {
                    const html = `
                        <div class="bg-white p-3 rounded-lg mb-3">
                            <h4 class="text-success fw-600 font-xssss mb-2">Active Subscription</h4>
                            <div class="subscription-info">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="font-xssss fw-600 text-grey-600">Duration:</span>
                                    <span class="font-xssss fw-700 text-primary">${subscriptionInfo.durationInMonths} months</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="font-xssss fw-600 text-grey-600">Price:</span>
                                    <span class="font-xssss fw-700 text-primary">$${subscriptionInfo.subscriptionPrice}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="font-xssss fw-600 text-grey-600">Valid until:</span>
                                    <span class="font-xssss fw-700 text-primary">${new Date(subscriptionInfo.expirationDate).toLocaleDateString()}</span>
                                </div>
                            </div>
                        </div>
                        <a href="#" class="btn btn-block border-0 w-100 bg-white p-3 text-danger fw-600 rounded-lg d-inline-block font-xssss unsubscribe-btn" data-course-id="${courseId}">UNSUBSCRIBE</a>`;
                    
                    subscriptionContainer.html(html);
                    attachUnsubscribeHandler();
                } else {
                    const html = `
                        <div class="subscription-options bg-white p-3 rounded-lg">
                            <h4 class="text-primary fw-600 font-xssss mb-3">Choose duration:</h4>
                            <div class="duration-options">
                                ${generateDurationOptionsHtml()}
                            </div>
                            <button class="btn btn-block border-0 w-100 bg-primary p-3 text-white fw-600 rounded-lg d-inline-block font-xssss mt-3" id="subscribeButton" data-course-id="${courseId}" data-duration="1">
                                SUBSCRIBE
                            </button>
                        </div>`;
                    
                    subscriptionContainer.html(html);
                    attachDurationSelectHandlers();
                    attachSubscribeHandler();
                }
            }

            function generateDurationOptionsHtml() {
                const options = [
                    { months: 1, discount: 0 },
                    { months: 3, discount: 10 },
                    { months: 6, discount: 20 },
                    { months: 12, discount: 30 }
                ];

                return options.map(option => `
                    <div class="duration-option mb-2" data-months="${option.months}" data-base-price="${basePrice}">
                        <div class="d-flex justify-content-between align-items-center p-2 rounded cursor-pointer duration-select ${option.months === 1 ? 'selected' : ''}">
                            <div>
                                <span class="font-xssss fw-600">${option.months} ${option.months === 1 ? 'month' : 'months'}</span>
                                ${option.discount > 0 ? `<span class="badge bg-success text-white ml-2">-${option.discount}%</span>` : ''}
                            </div>
                            <div class="text-primary font-xssss fw-700 subscription-price">
                                $${calculatePrice(basePrice, option.months, option.discount)}
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            function calculatePrice(basePrice, months, discount) {
                const discountAmount = basePrice * (discount / 100);
                return ((basePrice - discountAmount) * months).toFixed(2);
            }

            function attachDurationSelectHandlers() {
                $('.duration-select').click(function() {
                    if (isProcessing) return;
                    
                    const option = $(this).closest('.duration-option');
                    const months = option.data('months');
                    
                    $('.duration-select').removeClass('selected');
                    $(this).addClass('selected');
                    
                    selectedDuration = months;
                    $('#subscribeButton').data('duration', months);
                    
                    updatePrice();
                });
            }

            function attachSubscribeHandler() {
                $('#subscribeButton').click(function(e) {
                    e.preventDefault();
                    if (isProcessing) return;
                    
                    const button = $(this);
                    const courseId = button.data('course-id');
                    const duration = button.data('duration');
                    
                    button.prop('disabled', true);
                    button.html('<span class="spinner-border spinner-border-sm mr-2"></span>Please wait...');
                    isProcessing = true;
                    
                    $.post('/Course/Subscribe', {
                        courseId: courseId,
                        durationInMonths: duration
                    })
                    .done(function(response) {
                        if (response.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'You have successfully subscribed to the course',
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1500
                            });
                            
                            updateSubscriptionUI(true, {
                                durationInMonths: duration,
                                subscriptionPrice: calculatePrice(basePrice, duration, getDiscountByDuration(duration)),
                                expirationDate: new Date(Date.now() + duration * 30 * 24 * 60 * 60 * 1000)
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: 'An error occurred while subscribing to the course',
                                icon: 'error'
                            });
                        }
                    })
                    .fail(function() {
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred while subscribing to the course',
                            icon: 'error'
                        });
                    })
                    .always(function() {
                        button.prop('disabled', false);
                        button.html('SUBSCRIBE');
                        isProcessing = false;
                    });
                });
            }

            function attachUnsubscribeHandler() {
                $('.unsubscribe-btn').click(function(e) {
                    e.preventDefault();
                    if (isProcessing) return;
                    
                    const button = $(this);
                    const courseId = button.data('course-id');
                    
                    Swal.fire({
                        title: 'Confirmation',
                        text: 'Are you sure you want to unsubscribe from the course?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, unsubscribe',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            button.prop('disabled', true);
                            button.html('<span class="spinner-border spinner-border-sm mr-2"></span>Please wait...');
                            isProcessing = true;
                            
                            $.post('/Course/Unsubscribe', { courseId: courseId })
                                .done(function(response) {
                                    if (response.success) {
                                        Swal.fire({
                                            title: 'Success!',
                                            text: 'You have successfully unsubscribed from the course',
                                            icon: 'success',
                                            showConfirmButton: false,
                                            timer: 1500
                                        });
                                        updateSubscriptionUI(false);
                                    } else {
                                        Swal.fire({
                                            title: 'Error!',
                                            text: 'An error occurred while unsubscribing from the course',
                                            icon: 'error'
                                        });
                                    }
                                })
                                .fail(function() {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'An error occurred while unsubscribing from the course',
                                        icon: 'error'
                                    });
                                })
                                .always(function() {
                                    button.prop('disabled', false);
                                    button.html('UNSUBSCRIBE');
                                    isProcessing = false;
                                });
                        }
                    });
                });
            }

            function getDiscountByDuration(duration) {
                switch (duration) {
                    case 3: return 10;
                    case 6: return 20;
                    case 12: return 30;
                    default: return 0;
                }
            }

            // Initialization
            const courseId = $('#subscribeButton').data('course-id');
            const basePrice = parseFloat($('#basePrice').val());
            
            attachDurationSelectHandlers();
            attachSubscribeHandler();
            attachUnsubscribeHandler();
            updatePrice();
        });
    </script>
}