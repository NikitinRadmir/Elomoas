@using Elomoas.mvc.Models.Groups;
@model GroupVM;

@{
    ViewData["Title"] = "Groups";
}

<style>
    .search-card {
        border: 3px solid #d1d1d1;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        background: #fff;
    }

    .search-card:hover {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
        border-color: #b8b8b8;
    }

    .search-input {
        border: 2px solid #d1d1d1;
        padding: 15px 25px;
        font-size: 16px;
        border-radius: 12px;
        transition: all 0.3s ease;
        background-color: #f8f9fa;
    }

    .search-input:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        outline: none;
        background-color: #fff;
    }

    .search-input::placeholder {
        color: #6c757d;
        font-weight: 500;
    }

    .card-body.search-padding {
        padding: 15px 20px;
    }

    .section-header {
        background: linear-gradient(45deg, #f3f3f3, #ffffff);
        border: none;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .section-header h3 {
        color: #333;
        font-size: 1.5rem;
        margin: 0;
        padding: 10px 0;
    }
</style>

<div class="middle-sidebar-bottom">
    <div class="middle-sidebar-left">
        <div class="card mb-4 search-card">
            <div class="card-body search-padding">
                <form id="searchForm" method="get" asp-controller="Groups" asp-action="Groups">
                    <div class="form-group mb-0">
                        <input type="text" 
                               id="groupSearch" 
                               name="search"
                               value="@Model.SearchTerm"
                               class="form-control search-input" 
                               placeholder="🔍 Search groups by name..."
                               autocomplete="off">
                    </div>
                </form>
            </div>
        </div>
        
        <div id="groupsContainer" class="row">
            @if (Model.SubscribedGroups != null && Model.SubscribedGroups.Any())
            {
                <div class="col-12 mb-4">
                    <div class="card section-header">
                        <div class="card-body">
                            <h3 class="fw-700 mb-0"><i class="feather-briefcase text-current mr-2"></i><i class="feather-check text-current mr-2"></i>My Groups</h3>
                        </div>
                    </div>
                </div>
                @foreach (var group in Model.SubscribedGroups)
                {
                    <div class="col-xl-4 col-lg-6 col-md-6 group-item" data-group-name="@group.Name.ToLower()">
                        @await Html.PartialAsync("_GroupCard", group)
                    </div>
                }
            }

            @if (Model.Groups != null && Model.Groups.Any())
            {
                <div class="col-12 mb-4 mt-4">
                    <div class="card section-header">
                        <div class="card-body">
                            <h3 class="fw-700 mb-0"><i class="feather-briefcase text-current mr-2"></i>All Groups</h3>
                        </div>
                    </div>
                </div>
                @foreach (var group in Model.Groups)
                {
                    <div class="col-xl-4 col-lg-6 col-md-6 group-item" data-group-name="@group.Name.ToLower()">
                        @await Html.PartialAsync("_GroupCard", group)
                    </div>
                }
            }

            @if ((!Model.SubscribedGroups?.Any() ?? true) && (!Model.Groups?.Any() ?? true) && !string.IsNullOrEmpty(Model.SearchTerm))
            {
                <div class="col-12">
                    <div class="card w-100 text-center shadow-xss rounded-xxl border-0 p-4 mb-3">
                        <div class="card-body p-3">
                            <div class="row">
                                <div class="col-12">
                                    <i class="feather-search text-current display-4 mb-3"></i>
                                    <h2 class="fw-700 text-grey-900 font-xss mt-3">Groups with this name were not found</h2>
                                    <p class="text-grey-500 font-xssss mt-2">Try searching with a different name or browse all available groups</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function updateGroups(searchTerm) {
            $.get('/Groups/Groups', { search: searchTerm })
                .done(function (response) {
                    $('#groupsContainer').html($(response).find('#groupsContainer').html());
                    
                    const url = new URL(window.location);
                    url.searchParams.set('search', searchTerm || '');
                    history.pushState({}, '', url);

                    initializeSubscriptionHandlers();
                });
        }

        let searchTimeout;
        
        $('#groupSearch').on('input', function() {
            clearTimeout(searchTimeout);
            const searchTerm = $(this).val();
            
            searchTimeout = setTimeout(function() {
                updateGroups(searchTerm);
            }, 300);
        });

        $('#searchForm').on('submit', function(e) {
            e.preventDefault();
            const searchTerm = $('#groupSearch').val();
            updateGroups(searchTerm);
        });

        $(window).on('popstate', function() {
            const url = new URL(window.location);
            const searchTerm = url.searchParams.get('search') || '';
            
            $('#groupSearch').val(searchTerm);
            updateGroups(searchTerm);
        });

        function handleSubscriptionError() {
            alert('An error occurred. Please try again later.');
        }

        function initializeSubscriptionHandlers() {
            $('.subscribe-btn').click(function(e) {
                e.preventDefault();
                var groupId = $(this).data('group-id');
                var btn = $(this);
                btn.prop('disabled', true);

                $.post('/Groups/Subscribe', { groupId: groupId })
                    .done(function(response) {
                        if (response.success) {
                            btn.removeClass('bg-current subscribe-btn')
                               .addClass('bg-danger unsubscribe-btn')
                               .text('UNSUBSCRIBE')
                               .off('click')
                               .on('click', function(e) {
                                    e.preventDefault();
                                    handleUnsubscribe($(this));
                               });
                        } else {
                            handleSubscriptionError();
                        }
                    })
                    .fail(handleSubscriptionError)
                    .always(function() {
                        btn.prop('disabled', false);
                    });
            });

            $('.unsubscribe-btn').click(function(e) {
                e.preventDefault();
                handleUnsubscribe($(this));
            });
        }

        function handleUnsubscribe(btn) {
            var groupId = btn.data('group-id');
            btn.prop('disabled', true);

            $.post('/Groups/Unsubscribe', { groupId: groupId })
                .done(function(response) {
                    if (response.success) {
                        btn.removeClass('bg-danger unsubscribe-btn')
                           .addClass('bg-current subscribe-btn')
                           .text('SUBSCRIBE')
                           .off('click')
                           .on('click', function(e) {
                               e.preventDefault();
                               $('.subscribe-btn').click();
                           });
                    } else {
                        handleSubscriptionError();
                    }
                })
                .fail(handleSubscriptionError)
                .always(function() {
                    btn.prop('disabled', false);
                });
        }

        $(document).ready(function() {
            initializeSubscriptionHandlers();
        });
    </script>
}    