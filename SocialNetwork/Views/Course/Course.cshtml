@model Elomoas.mvc.Models.Courses.CourseDetailsVM

@{
    ViewData["Title"] = Model.Course.Name;
}

<div class="middle-sidebar-bottom">
    <div class="middle-sidebar-left">
        <div class="row">
            <div class="col-xl-8 col-xxl-9">
                <div class="card border-0 mb-0 rounded-lg overflow-hidden">
                    <div class="player shadow-none">
                        <video id='video' src='@Model.Course.Video' playsinline></video>
                        <div class='play-btn-big'></div>
                        <div class='controls'>
                            <div class="time"><span class="time-current"></span><span class="time-total"></span></div>
                            <div class='progress'>
                                <div class='progress-filled'></div>
                            </div>
                            <div class='controls-main'>
                                <div class='controls-left'>
                                    <div class='volume'>
                                        <div class='volume-btn loud mt-1'>
                                            <i class="feather-volume-1 font-xl text-white"></i>
                                        </div>
                                        <div class='volume-slider'>
                                            <div class='volume-filled'></div>
                                        </div>
                                    </div>
                                </div>
                                <div class='play-btn paused'></div>
                                <div class="controls-right">
                                    <div class='speed'>
                                        <ul class='speed-list'>
                                            <li class='speed-item' data-speed='0.5'>0.5x</li>
                                            <li class='speed-item' data-speed='0.75'>0.75x</li>
                                            <li class='speed-item active' data-speed='1'>1x</li>
                                            <li class='speed-item' data-speed='1.5'>1.5x</li>
                                            <li class='speed-item' data-speed='2'>2x</li>
                                        </ul>
                                    </div>
                                    <div class='fullscreen'>
                                        <svg width="30" height="22" viewBox="0 0 30 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M0 0V-1.5H-1.5V0H0ZM0 18H-1.5V19.5H0V18ZM26 18V19.5H27.5V18H26ZM26 0H27.5V-1.5H26V0ZM1.5 6.54545V0H-1.5V6.54545H1.5ZM0 1.5H10.1111V-1.5H0V1.5ZM-1.5 11.4545V18H1.5V11.4545H-1.5ZM0 19.5H10.1111V16.5H0V19.5ZM24.5 11.4545V18H27.5V11.4545H24.5ZM26 16.5H15.8889V19.5H26V16.5ZM27.5 6.54545V0H24.5V6.54545H27.5ZM26 -1.5H15.8889V1.5H26V-1.5Z" transform="translate(2 2)" fill="white" />
                                        </svg>
                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>
                </div>
                <div class="card d-block border-0 rounded-lg overflow-hidden dark-bg-transparent bg-transparent mt-4 pb-3">
                    <div class="row">
                        <div class="col-12">
                            <h2 class="fw-700 font-md d-block lh-4 mb-2">@Model.Course.Name</h2>
                        </div>
                    </div>
                </div>

                
                <div class="card d-block border-0 rounded-lg overflow-hidden p-4 shadow-xss mt-4 alert-success">
                    <h2 class="fw-700 font-sm mb-3 mt-1 pl-1 text-success mb-4">What you'll learn from this lesson</h2>
                    @foreach (var item in Model.Course.Learn.Split('^'))
                    {
                        <h4 class="font-xssss fw-600 text-grey-600 mb-3 pl-30 position-relative lh-24">
                            <i class="ti-check font-xssss btn-round-xs bg-success text-white position-absolute left-0 top-5"></i>
                            @item
                        </h4>
                    }
                </div>

                <div class="card d-block border-0 rounded-lg overflow-hidden p-4 shadow-xss mt-4">
                    <h2 class="fw-700 font-sm mb-3 mt-1 pl-1 mb-3">Description</h2>
                    <p class="font-xssss fw-500 lh-28 text-grey-600 mb-0 pl-2">@Model.Course.Description</p>
                </div>
            </div>
            <div class="col-xl-4 col-xxl-3">
                <div class="card p-4 mb-4 bg-primary border-0 shadow-xss rounded-lg">
                    <div class="card-body">
                        <h2 class="text-white font-xsssss fw-700 text-uppercase ls-3 ">@Model.Course.PL</h2>
                        <h1 class="display2-size text-white fw-700">$ @Model.Course.Price / month</h1>
                        <input type="hidden" id="basePrice" value="@Model.Course.Price" />
                        <h4 class="text-white fw-500 mb-4 lh-24 font-xssss">For anyone validating Framer as a professional prototyping tool.</h4>
                        <h4 class="text-white font-xssss mb-2"><i class="ti-check mr-2 text-white"></i> Unlimited views</h4>
                        <h4 class="text-white font-xssss mb-2"><i class="ti-check mr-2 text-white"></i> Everything in Free</h4>
                        <h4 class="text-white font-xssss mb-4"><i class="ti-check mr-2 text-white"></i> Private share links</h4>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="subscription-container">
                                @if (Model.IsSubscribed)
                                {
                                    <div class="bg-white p-3 rounded-lg mb-3">
                                        <h4 class="text-success fw-600 font-xssss mb-2">Active Subscription</h4>
                                        <div class="subscription-info">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span class="font-xssss fw-600 text-grey-600">Duration:</span>
                                                <span class="font-xssss fw-700 text-primary">@Model.SubscriptionInfo.DurationInMonths months</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span class="font-xssss fw-600 text-grey-600">Price:</span>
                                                <span class="font-xssss fw-700 text-primary">$@Model.SubscriptionInfo.SubscriptionPrice</span>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="font-xssss fw-600 text-grey-600">Valid until:</span>
                                                <span class="font-xssss fw-700 text-primary">@Model.SubscriptionInfo.ExpirationDate.ToString("dd.MM.yyyy")</span>
                                            </div>
                                        </div>
                                    </div>
                                    <a href="#" class="btn btn-block border-0 w-100 bg-white p-3 text-danger fw-600 rounded-lg d-inline-block font-xssss unsubscribe-btn" data-course-id="@Model.Course.Id">UNSUBSCRIBE</a>
                                }
                                else
                                {
                                    <div class="subscription-options bg-white p-3 rounded-lg">
                                        <h4 class="text-primary fw-600 font-xssss mb-3">Choose duration:</h4>
                                        <div class="duration-options">
                                            @foreach (var option in Model.DurationOptions)
                                            {
                                                <div class="duration-option mb-2" data-months="@option.Months" data-base-price="@Model.Course.Price">
                                                    <div class="d-flex justify-content-between align-items-center p-2 rounded cursor-pointer duration-select @(option.Months == 1 ? "selected" : "")">
                                                        <div>
                                                            <span class="font-xssss fw-600">@option.GetDisplayText()</span>
                                                            @if (option.DiscountPercent > 0)
                                                            {
                                                                <span class="badge bg-success text-white ml-2">-@option.DiscountPercent%</span>
                                                            }
                                                        </div>
                                                        <div class="text-primary font-xssss fw-700 subscription-price">
                                                            $@option.CalculatePrice(Model.Course.Price)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <button class="btn btn-block border-0 w-100 bg-primary p-3 text-white fw-600 rounded-lg d-inline-block font-xssss mt-3" id="subscribeButton" data-course-id="@Model.Course.Id" data-duration="1">
                                            SUBSCRIBE
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <a asp-controller="Auth" asp-action="Login" class="btn btn-block border-0 w-100 bg-white p-3 text-primary fw-600 rounded-lg d-inline-block font-xssss">LOGIN</a>
                        }
                    </div>
                </div>
                

                
            </div>

        </div>
    </div>
    
</div>

@section Styles {
    <link href="https://vjs.zencdn.net/8.10.0/video-js.css" rel="stylesheet" />
    <link href="~/css/video-player.css" rel="stylesheet" />
    <style>
        .duration-select {
            border: 1px solid #e5e5e5;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .duration-select:hover {
            background-color: #f8f9fa;
            border-color: #007bff;
        }

        .duration-select.selected {
            background-color: #e8f4ff;
            border-color: #007bff;
        }

        .badge {
            font-size: 0.7rem;
            padding: 0.2rem 0.5rem;
        }

        .cursor-pointer {
            cursor: pointer;
        }

        .spinner-border {
            width: 1rem;
            height: 1rem;
            border-width: 0.15em;
        }

        .subscription-price {
            font-size: 1.2rem;
            font-weight: 600;
            color: #007bff;
        }

        /* Добавляем стили для выбора длительности */
        .duration-option {
            cursor: pointer;
        }

        .duration-option .duration-select {
            transition: all 0.3s ease;
        }

        .duration-option .duration-select:hover {
            background-color: #f8f9fa;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .duration-option .duration-select.selected {
            background-color: #e8f4ff;
            border-color: #007bff;
            box-shadow: 0 2px 4px rgba(0,123,255,0.2);
        }

        .duration-option .badge {
            transition: all 0.3s ease;
        }

        .duration-option:hover .badge {
            transform: scale(1.1);
        }

        .subscription-price {
            transition: all 0.3s ease;
            position: relative;
        }

        .subscription-price.highlight {
            color: #28a745;
            transform: scale(1.1);
        }

        .duration-select.selected .subscription-price {
            color: #28a745;
            font-weight: 700;
        }
    </style>
}

@section Scripts {
    <script src="https://vjs.zencdn.net/8.10.0/video.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function() {
            let selectedDuration = 1;
            let isProcessing = false;

            // Инициализация видеоплеера
            const player = document.querySelector('.player');
            const video = document.querySelector('#video');
            const playBtn = document.querySelector('.play-btn');
            const playBtnBig = document.querySelector('.play-btn-big');
            const volumeBtn = document.querySelector('.volume-btn');
            const volumeSlider = document.querySelector('.volume-slider');
            const volumeFill = document.querySelector('.volume-filled');
            const progressSlider = document.querySelector('.progress');
            const progressFill = document.querySelector('.progress-filled');
            const textCurrent = document.querySelector('.time-current');
            const textTotal = document.querySelector('.time-total');
            const speedBtns = document.querySelectorAll('.speed-item');
            const fullscreenBtn = document.querySelector('.fullscreen');

            let lastVolume = 1;
            let isMouseDown = false;
            let isFullscreen = false;

            // Функция переключения воспроизведения
            function togglePlay() {
                if (video.paused) {
                    video.play();
                    playBtnBig.style.display = 'none';
                } else {
                    video.pause();
                    playBtnBig.style.display = 'block';
                }
                playBtn.classList.toggle('paused');
            }

            // Функция переключения полноэкранного режима
            function toggleFullscreen() {
                if (!isFullscreen) {
                    if (player.requestFullscreen) {
                        player.requestFullscreen();
                    } else if (player.mozRequestFullScreen) {
                        player.mozRequestFullScreen();
                    } else if (player.webkitRequestFullscreen) {
                        player.webkitRequestFullscreen();
                    } else if (player.msRequestFullscreen) {
                        player.msRequestFullscreen();
                    }
                } else {
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    } else if (document.mozCancelFullScreen) {
                        document.mozCancelFullScreen();
                    } else if (document.webkitExitFullscreen) {
                        document.webkitExitFullscreen();
                    } else if (document.msExitFullscreen) {
                        document.msExitFullscreen();
                    }
                }
                isFullscreen = !isFullscreen;
            }

            // Функция переключения звука
            function toggleMute() {
                if (video.volume) {
                    lastVolume = video.volume;
                    video.volume = 0;
                    volumeBtn.classList.add('muted');
                    volumeFill.style.width = 0;
                } else {
                    video.volume = lastVolume;
                    volumeBtn.classList.remove('muted');
                    volumeFill.style.width = `${lastVolume * 100}%`;
                }
            }

            // Функция изменения громкости
            function changeVolume(e) {
                volumeBtn.classList.remove('muted');
                let volume = e.offsetX / volumeSlider.offsetWidth;
                volume < 0.1 ? volume = 0 : volume = volume;
                volumeFill.style.width = `${volume * 100}%`;
                video.volume = volume;
                if (volume > 0.7) {
                    volumeBtn.classList.add('loud');
                } else if (volume < 0.7 && volume > 0) {
                    volumeBtn.classList.remove('loud');
                } else if (volume == 0) {
                    volumeBtn.classList.add('muted');
                }
                lastVolume = volume;
            }

            // Функция обновления прогресса
            function updateProgress() {
                const time = (video.currentTime / video.duration) * 100;
                progressFill.style.width = `${time}%`;
                textCurrent.textContent = getTimeCodeFromNum(video.currentTime);
            }

            // Функция установки прогресса
            function setProgress(e) {
                const newTime = e.offsetX / progressSlider.offsetWidth;
                progressFill.style.width = `${newTime * 100}%`;
                video.currentTime = newTime * video.duration;
            }

            // Функция форматирования времени
            function getTimeCodeFromNum(num) {
                let seconds = parseInt(num);
                let minutes = parseInt(seconds / 60);
                seconds -= minutes * 60;
                const hours = parseInt(minutes / 60);
                minutes -= hours * 60;

                if (hours === 0) return `${minutes}:${String(seconds % 60).padStart(2, 0)}`;
                return `${String(hours).padStart(2, 0)}:${minutes}:${String(seconds % 60).padStart(2, 0)}`;
            }

            // Добавляем обработчики событий
            playBtn.addEventListener('click', togglePlay);
            playBtnBig.addEventListener('click', togglePlay);
            video.addEventListener('click', togglePlay);
            video.addEventListener('timeupdate', updateProgress);
            video.addEventListener('canplay', () => {
                textTotal.textContent = getTimeCodeFromNum(video.duration);
            });
            video.addEventListener('ended', () => {
                playBtnBig.style.display = 'block';
                playBtn.classList.add('paused');
            });
            volumeBtn.addEventListener('click', toggleMute);
            volumeSlider.addEventListener('click', changeVolume);
            progressSlider.addEventListener('click', setProgress);
            fullscreenBtn.addEventListener('click', toggleFullscreen);

            // Обработчики для перетаскивания ползунка громкости
            volumeSlider.addEventListener('mousedown', () => {
                isMouseDown = true;
            });
            volumeSlider.addEventListener('mousemove', (e) => {
                if (isMouseDown) {
                    changeVolume(e);
                }
            });
            volumeSlider.addEventListener('mouseup', () => {
                isMouseDown = false;
            });
            document.addEventListener('mouseup', () => {
                isMouseDown = false;
            });

            // Обработчики для клавиш
            document.addEventListener('keyup', (e) => {
                switch (e.key.toLowerCase()) {
                    case ' ':
                        togglePlay();
                        break;
                    case 'm':
                        toggleMute();
                        break;
                    case 'arrowright':
                        video.currentTime += 5;
                        break;
                    case 'arrowleft':
                        video.currentTime -= 5;
                        break;
                }
            });

            // Обработчики для скорости воспроизведения
            speedBtns.forEach(speedBtn => {
                speedBtn.addEventListener('click', () => {
                    speedBtns.forEach(btn => btn.classList.remove('active'));
                    speedBtn.classList.add('active');
                    video.playbackRate = speedBtn.getAttribute('data-speed');
                });
            });

            // Обработчики для полноэкранного режима
            document.addEventListener('fullscreenchange', handleFullscreenChange);
            document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
            document.addEventListener('mozfullscreenchange', handleFullscreenChange);
            document.addEventListener('MSFullscreenChange', handleFullscreenChange);

            function handleFullscreenChange() {
                isFullscreen = Boolean(
                    document.fullscreenElement ||
                    document.webkitFullscreenElement ||
                    document.mozFullScreenElement ||
                    document.msFullscreenElement
                );
            }

            // Инициализация начального состояния
            playBtnBig.style.display = 'block';

            // Обработка выбора длительности подписки
            $('.duration-select').on('click', function() {
                const option = $(this).closest('.duration-option');
                const months = option.data('months');
                selectedDuration = months;
                
                // Обновляем визуальное выделение
                $('.duration-select').removeClass('selected');
                $(this).addClass('selected');
                
                // Обновляем кнопку подписки
                $('#subscribeButton').data('duration', months);

                // Анимация цены
                const priceElement = $(this).find('.subscription-price');
                priceElement.addClass('highlight');
                setTimeout(() => {
                    priceElement.removeClass('highlight');
                }, 300);

                // Добавляем анимацию при выборе
                $(this).css('transform', 'scale(1.02)');
                setTimeout(() => {
                    $(this).css('transform', '');
                }, 200);
            });

            // Обработка кнопки подписки
            $('#subscribeButton').on('click', async function() {
                if (isProcessing) return;
                
                const button = $(this);
                const courseId = button.data('course-id');
                const duration = button.data('duration');
                
                try {
                    isProcessing = true;
                    button.prop('disabled', true);
                    button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');

                    const response = await $.ajax({
                        url: '/Course/Subscribe',
                        method: 'POST',
                        data: {
                            courseId: courseId,
                            durationInMonths: duration
                        }
                    });

                    if (response.success) {
                        // Показываем уведомление об успехе
                        await Swal.fire({
                            icon: 'success',
                            title: 'Subscribed!',
                            text: `You have successfully subscribed to this course for ${duration} month${duration > 1 ? 's' : ''}!`,
                            showConfirmButton: false,
                            timer: 2000
                        });

                        // Обновляем UI без перезагрузки
                        const subscriptionHtml = `
                        <div class="bg-white p-3 rounded-lg mb-3">
                            <h4 class="text-success fw-600 font-xssss mb-2">Active Subscription</h4>
                            <div class="subscription-info">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="font-xssss fw-600 text-grey-600">Duration:</span>
                                        <span class="font-xssss fw-700 text-primary">${duration} month${duration > 1 ? 's' : ''}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="font-xssss fw-600 text-grey-600">Price:</span>
                                        <span class="font-xssss fw-700 text-primary">$${response.subscriptionPrice}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="font-xssss fw-600 text-grey-600">Valid until:</span>
                                        <span class="font-xssss fw-700 text-primary">${response.expirationDate}</span>
                                    </div>
                            </div>
                        </div>
                        <a href="#" class="btn btn-block border-0 w-100 bg-white p-3 text-danger fw-600 rounded-lg d-inline-block font-xssss unsubscribe-btn" data-course-id="${courseId}">UNSUBSCRIBE</a>`;
                    
                        $('.subscription-container').html(subscriptionHtml);
                        
                        // Переинициализируем обработчик отписки
                        initUnsubscribeHandler();
                } else {
                        throw new Error('Failed to subscribe');
                    }
                } catch (error) {
                    console.error('Subscription error:', error);
                    await Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Failed to subscribe. Please try again.',
                    });
                } finally {
                    isProcessing = false;
                    button.prop('disabled', false);
                    button.html('SUBSCRIBE');
                }
            });

            // Функция инициализации обработчика отписки
            function initUnsubscribeHandler() {
                $('.unsubscribe-btn').off('click').on('click', async function(e) {
                    e.preventDefault();
                    const button = $(this);
                    const courseId = button.data('course-id');

                    try {
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: "You will be unsubscribed from this course",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Yes, unsubscribe!'
                        });

                        if (result.isConfirmed) {
                            button.prop('disabled', true);
                            button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');

                            const response = await $.ajax({
                                url: '/Course/Unsubscribe',
                                method: 'POST',
                                data: { courseId: courseId }
                            });

                            if (response.success) {
                                await Swal.fire({
                                    icon: 'success',
                                    title: 'Unsubscribed!',
                                    text: 'You have been unsubscribed from this course.',
                                    showConfirmButton: false,
                                    timer: 2000
                                });

                                // Update UI to show subscription options
                                const subscriptionOptionsHtml = `
                        <div class="subscription-options bg-white p-3 rounded-lg">
                            <h4 class="text-primary fw-600 font-xssss mb-3">Choose duration:</h4>
                            <div class="duration-options">
                                            @foreach (var option in Model.DurationOptions)
                                            {
                                                <div class="duration-option mb-2" data-months="@option.Months" data-base-price="@Model.Course.Price">
                                                    <div class="d-flex justify-content-between align-items-center p-2 rounded cursor-pointer duration-select @(option.Months == 1 ? "selected" : "")">
                                                        <div>
                                                            <span class="font-xssss fw-600">@option.GetDisplayText()</span>
                                                            @if (option.DiscountPercent > 0)
                                                            {
                                                                <span class="badge bg-success text-white ml-2">-@option.DiscountPercent%</span>
                                                            }
                                                        </div>
                                                        <div class="text-primary font-xssss fw-700 subscription-price">
                                                            $@option.CalculatePrice(Model.Course.Price)
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                            </div>
                            <button class="btn btn-block border-0 w-100 bg-primary p-3 text-white fw-600 rounded-lg d-inline-block font-xssss mt-3" id="subscribeButton" data-course-id="${courseId}" data-duration="1">
                                SUBSCRIBE
                            </button>
                        </div>`;
                    
                                $('.subscription-container').html(subscriptionOptionsHtml);
                                
                                // Reinitialize all handlers
                                initializeDurationHandlers();
                                initializeSubscribeHandler();
                            } else {
                                throw new Error('Failed to unsubscribe');
                            }
                        }
                    } catch (error) {
                        console.error('Unsubscription error:', error);
                        await Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Failed to unsubscribe. Please try again.',
                        });
                    } finally {
                        button.prop('disabled', false);
                        button.html('UNSUBSCRIBE');
                    }
                });
            }

            // Функция инициализации обработчиков длительности
            function initializeDurationHandlers() {
                // Отключаем предыдущие обработчики
                $('.duration-select').off('click');
                
                // Добавляем новые обработчики
                $('.duration-select').on('click', function() {
                    const option = $(this).closest('.duration-option');
                    const months = option.data('months');
                    
                    // Обновляем визуальное выделение
                    $('.duration-select').removeClass('selected');
                    $(this).addClass('selected');
                    
                    // Обновляем кнопку подписки
                    $('#subscribeButton').data('duration', months);
                    
                    // Анимация цены
                    const priceElement = $(this).find('.subscription-price');
                    priceElement.addClass('highlight');
                    setTimeout(() => {
                        priceElement.removeClass('highlight');
                    }, 300);

                    // Добавляем анимацию при выборе
                    $(this).css('transform', 'scale(1.02)');
                    setTimeout(() => {
                        $(this).css('transform', '');
                    }, 200);
                });
            }

            // Функция инициализации обработчика подписки
            function initializeSubscribeHandler() {
                $('#subscribeButton').off('click').on('click', async function() {
                    if (isProcessing) return;
                    
                    const button = $(this);
                    const courseId = button.data('course-id');
                    const duration = button.data('duration');
                    
                    try {
                        isProcessing = true;
                    button.prop('disabled', true);
                        button.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');
                    
                        const response = await $.ajax({
                            url: '/Course/Subscribe',
                            method: 'POST',
                            data: {
                        courseId: courseId,
                        durationInMonths: duration
                            }
                        });

                        if (response.success) {
                            await Swal.fire({
                                icon: 'success',
                                title: 'Subscribed!',
                                text: `You have successfully subscribed to this course for ${duration} month${duration > 1 ? 's' : ''}!`,
                                showConfirmButton: false,
                                timer: 2000
                            });

                            const subscriptionHtml = `
                                <div class="bg-white p-3 rounded-lg mb-3">
                                    <h4 class="text-success fw-600 font-xssss mb-2">Active Subscription</h4>
                                    <div class="subscription-info">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <span class="font-xssss fw-600 text-grey-600">Duration:</span>
                                            <span class="font-xssss fw-700 text-primary">${duration} month${duration > 1 ? 's' : ''}</span>
                                        </div>
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <span class="font-xssss fw-600 text-grey-600">Price:</span>
                                            <span class="font-xssss fw-700 text-primary">$${response.subscriptionPrice}</span>
                                        </div>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="font-xssss fw-600 text-grey-600">Valid until:</span>
                                            <span class="font-xssss fw-700 text-primary">${response.expirationDate}</span>
                                        </div>
                                    </div>
                                </div>
                                <a href="#" class="btn btn-block border-0 w-100 bg-white p-3 text-danger fw-600 rounded-lg d-inline-block font-xssss unsubscribe-btn" data-course-id="${courseId}">UNSUBSCRIBE</a>`;

                            $('.subscription-container').html(subscriptionHtml);
                            
                            // Reinitialize unsubscribe handler
                            initUnsubscribeHandler();
                        } else {
                            throw new Error('Failed to subscribe');
                        }
                    } catch (error) {
                        console.error('Subscription error:', error);
                        await Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Failed to subscribe. Please try again.',
                        });
                    } finally {
                        isProcessing = false;
                        button.prop('disabled', false);
                        button.html('SUBSCRIBE');
                    }
                });
            }

            // Инициализация всех обработчиков при загрузке страницы
            initializeDurationHandlers();
            initializeSubscribeHandler();
            initUnsubscribeHandler();
        });
    </script>
}